#!/usr/bin/env bash
# Global Declarations
ARG="$1"
ARGC=$#
CONFIG=LOCATION
COUNT=0
LIST=()
ANIMATE=$(which pv 2>/dev/null)
ANIMATE_SPEED=90
AVAILABLE_USER=1
TIMEOUT="8h"

# Store some stuff, these can be referenced from config files
read CLIENT SRCPORT SERVER DSTPORT <<<"${SSH_CONNECTION}"
export CLIENT SRCPORT SERVER DSTPORT IP="$SERVER"
export SSH_TTY
export DISPLAY="${CLIENT}:0"
export TERM
export PPID HOST_PORT="$PPID"
export TMOUT=60
readonly CLIENT SRCPORT SERVER DSTPORT SSH_TTY TERM PPID TMOUT

err(){
  local message="$1"
  logger -s -p local0.notice -t "islet" "$0: $message"
  exit 1
}

# Get global variables
if [[ -f "$CONFIG" ]]; then
  . "$CONFIG"
  . "$LIBISLET"
  readonly CONFIG
else
  err "Error: ${CONFIG:-config} or ${LIBISLET:-libislet} not found!"
fi

# Export import_configs function to use in modules
export -f import_configs

clear

# Import Module. This will soon be removed.
. "$INSTALL_DIR/modules/$MODULE"

readonly TIME=$(date +"%s")
readonly EXPIRATION=$(date --date=@$((TIME+86400*DAYS)) +"%c")

# Display ISLET Banner
if [[ "$ARG" != "nobanner" ]]; then
  test -f "${ANIMATE:-notset}" && islet_banner | pv -qL "$ANIMATE_SPEED" || islet_banner
  # Press key to continue
  timecount $TMOUT
  clear && echo
fi

#######################################
# Create SQLite database
# Globals:
#   DB   - Location of database file
#   USER - Owner of database file
#   GROUp - Group of database file
# Arguments:
#   None
# Returns:
#   None
#######################################

create_db() {
sqlite3 "$DB" <<EOF
PRAGMA foreign_keys = ON;
CREATE TABLE accounts (
        user VARCHAR PRIMARY KEY,
        password VARCHAR,
        ts TIMESTAMP
);
CREATE TABLE images (
        user VARCHAR REFERENCES accounts(user) ON DELETE CASCADE,
        image VARCHAR
);
CREATE UNIQUE INDEX idx_images_user_image ON images(user, image);
EOF
return 0
}

#######################################
# Recreate database if it's not SQLite
# Old versions of ISLET used text file
# Globals:
#   DB   - Location of database file
# Arguments:
#   None
# Returns:
#   None
#######################################

is_sqlite() {
  local file="$(which sqlite3)"
  [[ -f "$file" ]] || quit "Fatal: sqlite3 not found, is it installed and in the PATH?"
  if ! file "$DB" 2>/dev/null | grep -q SQLite; then
    rm -f "$DB" 2>/dev/null
    create_db
    test $? -eq 0 && return 0 || quit "Unable to create $DB"
  fi
  { [[ $(stat -c %U ${DB}) == "$USER"  ]] || chown "$USER"     "$DB" 2>/dev/null; } || quit "Fatal: cannot set owner ${USER} on ${DB}, do you have permission?"
  { [[ $(stat -c %G ${DB}) == "$GROUP" ]] || chown :"${GROUP}" "$DB" 2>/dev/null; } || quit "Fatal: cannot set group ${GROUP} on ${DB}, do you have permission?"
  { [[ $(stat -c %a ${DB}) == 660      ]] || chmod 660         "$DB" 2>/dev/null; } || quit "Fatal: cannot set modes 660 on ${DB}, do you have permission?"
}

#######################################
# Configures autocompletion
# Globals:
#   TMP - Temporary directory
# Arguments:
#   None
# Returns:
#   None
#######################################

enable_autocompletion(){
  # Hackish way
  TMP="/tmp/islet"
  [[ "$PWD" == "$TMP" ]] || { mkdir -p "$TMP" && cd "$TMP"; }
  [[ "$PWD" == "$TMP" ]] && touch {new,existing,yes,no}
}

#######################################
# Prompt user if they're new or existing
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################

identify(){
  local choice
  enable_autocompletion
  ask "Are you a new or existing user? "
  option "new" "existing"
  read -e -r choice
  # Normalize to lowercase
  choice=${choice,,}

  if [[ "$choice" =~ ^[n][e][w]$ ]] ||
     [[ "$choice" =~ ^[e][x][i][s][t][i][n][g]$ ]] ||
     [[ "$choice" =~ ^n$ ]] || [[ "$choice" =~ ^e$ ]]
  then
    { [[ "$choice" =~ ^[n][e][w]$ ]] || [[ "$choice" =~ ^n$ ]]; } && new_user
    { [[ "$choice" =~ ^[e][x][i][s][t][i][n][g]$ ]] || [[ "$choice" =~ ^e$ ]]; } && existing_user
  else
    try_again
  fi
}

###################################################
# Get username and password for new user
# Globals:
#   AVAILABLE_USER - 1 if user already exists in DB
# Arguments:
#   None
# Returns:
#   None
###################################################

new_user(){
  notice "A temporary account will be created so that you can resume your session."
  echo

  until test "$AVAILABLE_USER" -ne 1
  do
    choose_username && verify_new_user
  done

  until [[ "$PASSWORD" ]] && [[ "$PASSWORD_VERIFY" ]]
  do
    choose_password && verify_new_password
  done
}

choose_username(){
  ask "Choose a username: "
  option "a-zA-Z0-9"
  read -r USERNAME
  [[ "$USERNAME" ]] || { alert "Empty value not permitted" && return 1; }
  USERNAME=$(sanitize "$USERNAME") && return 0
}

choose_password(){
  ask "Choose a password: "
  option "a-zA-Z0-9{${MIN_PASSWD_LEN},}"
  read -r -s PASSWORD
  [[ "$PASSWORD" ]] || { alert "\nEmpty value not permitted" && return 1; }
  echo
  ask "Verify your password: "
  read -r -s PASSWORD_VERIFY
  [[ "$PASSWORD_VERIFY" ]] || { alert "\nEmpty value not permitted" && return 1; }
  echo
}

###################################################
# Handles container reattachment for existing users
# Globals:
#   FAILURE_COUNT - Max # of authentication failures
#   BASENAME      - Container name prefix
# Arguments:
#   None
# Returns:
#   None
###################################################

existing_user(){
  local password
  local hash
  local auth
  local exists
  local count=1
  notice "Your previous account is only valid for the length of the event, after that you must create a new account"
  echo
  while test "$count" -le "$FAILURE_COUNT"; do
    ask "Username: "
    read -r USERNAME
    USERNAME=$(sanitize $USERNAME)
    ask "Password: "
    read -r -s PASSWORD
    echo

    hash=$(echo "$PASSWORD" | sha1sum | sed 's/ .*//')
    auth=$(sqlite3 $DB "SELECT user, password FROM accounts WHERE user='$USERNAME' AND password='$hash';")

    [[ "$auth" ]] && info "Success" && sleep 1 && break
    notice "Login failed, try again ("$count"/"$FAILURE_COUNT")."
    let count++
  done
  let count--
  [[ $auth ]] || quit "Too many failed attempts! ("$count"/"$FAILURE_COUNT")."
}

###################################################
# Checks if user already exists in database
# Globals:
#   USERNAME - Username to validate
#   AVAILABLE_USER - 0 if username is note taken
# Arguments:
#   None
# Returns:
#   None
###################################################

verify_new_user(){
  local exists="$(sqlite3 "$DB" "SELECT user FROM accounts WHERE user='$USERNAME';")"
  if [[ "$exists" ]]; then
    AVAILABLE_USER=1
    notice "User already exists! Try a different one."
  else
    AVAILABLE_USER=0
    echo "Your username is ${MF}$USERNAME${N}"
  fi
}

###########################################################
# Validate password, hash, and write account to database
# Globals:
#   PASSWORD      - Password to validate and store in db
#   USERNAME      - Used to create account in database
#   FAILURE_COUNT - Max # of authentication failures
#   CLIENT        - IP address of connecting user
#   EXPIRATION    - Date/time account expires
# Arguments:
#   None
# Returns:
#   None
###########################################################

verify_new_password(){
  local count=1
  local hash
  while [[ "$PASSWORD" != "$PASSWORD_VERIFY" ]] || [[ "${#PASSWORD}" -lt "$MIN_PASSWD_LEN" ]]; do
    if [[ "$count" -lt "$FAILURE_COUNT" ]]; then
      notice "Passwords do not match or meet length requirements (${BF}"${MIN_PASSWD_LEN}"${N}${Y}). Try again ("$count"/"$FAILURE_COUNT")."
      choose_password
    else
      quit "Too many failed attempts! ("$count"/"$FAILURE_COUNT")."
    fi
    let count++
  done

  readonly hash=$(echo "$PASSWORD" | sha1sum | sed 's/ .*//')
  sqlite3 "$DB" "pragma foreign_keys = on; INSERT INTO accounts VALUES('"${USERNAME}"','${hash}', strftime('%s', 'now'));" 2>/dev/null || quit "Couldn't write to $DB!"
  log "${USERNAME}: Account created from $CLIENT"

  echo "Your account will expire on ${MF}$EXPIRATION${N}"
}

menu_loop(){
  while true; do
    { [[ -d "$CONFIG_DIR" ]] && cd "$CONFIG_DIR"; } || quit "Unable to access ${CONFIG_DIR}!"
    LIST=()
    config_menu
  done
}

config_menu(){
  local count=0
  local menu
  local attach
  # Configuration menu
  notice "\t\t\t\tAvailable configurations:\n"
  printf '\t\t\t%-29s %-7s %-30s\n' "${B}Configuration${N}" "|" "${B}Description${N}"
  printf '\t\t\t%-30s %-7s %-30s\n' "${BF}$SPACER1${N}" "|" "${BF}$SPACER1${N}"

  # Iterate over configuration files in $CONFIG_DIR and display them as options
  # It prints the config file ($config) and its description ($DESCRIPTION)
  for config in environments/*.conf plugins/*.conf; do
    [[ -f "$config" ]] && . "$config"
    if [[ "$VISIBLE" = "yes" || "$ENABLE" = "yes" ]]; then
      config_name="$(basename $config)"
      printf '\t\t\t%-30s %-7s %-30s\n' "${WF}$config_name${N}" "|" "${U}$DESCRIPTION${N}"
      LIST+=("$config")
    fi
    unset BANNER VISIBLE ENABLE PLUGIN config
  done

  # Quit if there are no config files present
  [[ "${#LIST[@]}" -eq 0 ]] && quit "\t\t\tNo configurations available!"
  echo && unset BANNER
  notice "Choose a number to load the configuration (or ^C to exit):"

  PS3="${Y}[${N}${BF}Choice${N}${Y}]${N}: "
  # Here the user chooses the configuration from the menu
  # Inherit the variables from the config file after selection
  select CONFIGURATION in "${LIST[@]}"
  do
    menu=1
    if [[ -f "$CONFIG_DIR/$CONFIGURATION" ]]; then
      . "$CONFIG_DIR/$CONFIGURATION"
      # Export $CONFIGURATION for use in modules
      export CONFIGURATION
      break
    else
      let count++
      if [[ "$count" -ge "$FAILURE_COUNT" ]]; then
        quit "Too many failed attempts! ($count/$FAILURE_COUNT)"
      fi
      alert "Invalid choice! Try again ($count/$FAILURE_COUNT)"
    fi
  done

  unset LIST

  # If configuration is for plugin then execute it
  if [[ $PLUGIN ]]; then
    if [[ -f "$INSTALL_DIR/plugins/$PLUGIN" ]]; then
      . "$INSTALL_DIR/plugins/$PLUGIN"
    else
      alert "Plugin $PLUGIN does not exist..contact the administrator."
    fi
    # Go back to menu_loop after
    return 0
  fi

  # Avoid launching last value of CONFIGURATION when user sends EOF
  [[ $menu ]] || quit "Quit by user..."
  unset menu

  # Display image banner
  [[ "$BANNER" ]] && clear && echo "$BANNER"

  # This is how we handle using the same account for multiple images
  attach=$(sqlite3 $DB "SELECT image FROM images WHERE user='$USERNAME' AND image='$BASENAME'";)
  { [[ $attach ]] && module_attach; } || module_start
}

###########################################################
# Reprompt if user did not select new or existing user
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
###########################################################

try_again(){
  local try
  ask "I didn't understand your response. Would you like to try again? "
  option "yes" "no"
  read -e -r try
  # Normalize to lowercase
  try=${try,,}
  if [[ "$try" =~ ^[yn]$ ]] || [[ "$try" =~ ^[y][e][s]$ ]] || [[ "$try" =~ ^[n][o]$ ]]; then
     [[ "$try" =~ ^y$   ]]  || [[ "$try" =~ ^[y][e][s]$ ]] && identify
     [[ "$try" =~ ^n$   ]]  || [[ "$try" =~ ^[n][o]$    ]] && quit "user decided to leave from try_again"
  else
    quit "User forced to exit from try_again because of invalid response to question"
  fi
}

trap 'echo; quit "Trap received, exiting..."' 1 2 3 20
# It all begins here
is_sqlite
module_verify
identify
menu_loop
exit
