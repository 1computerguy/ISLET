#!/usr/bin/env bash
# Global Variables
CONFIG=LOCATION
AVAILABLE_USER=1
TIMEOUT="8h"

err(){
  MESSAGE="$1"
  logger -s -p local0.notice -t "islet" "$0: $MESSAGE"
  exit 1
}

# Retrieve globals
if [ -f "$CONFIG" ]; then
  . "$CONFIG"
  . "$LIBISLET"
  readonly CONFIG
  readonly LIBISLET
else
  err "Error: ${CONFIG:-config} or ${LIBISLET:-libislet} not found!"
  exit 1
fi

# Override with per image configuration
readonly CONFIGURATION="$1"
if [ -f "$CONFIG_DIR/$CONFIGURATION" ]
then
  . "$CONFIG_DIR/$CONFIGURATION"
else
  quit "Timeout occurred, config not selected!"
fi

readonly TIME=$(date +"%s")
readonly EXPIRATION=$(date --date=@$((TIME+86400*DAYS)) +"%c")
readonly TIMEOUT
readonly DB
readonly USER
readonly BIND
readonly INTERFACE
readonly IP
readonly VIRTUAL_PORT

#######################################
# Create SQLite database
# Globals:
#   DB   - Location of database file
#   USER - Owner of database file
# Arguments:
#   None
# Returns:
#   None
#######################################

create_db() {
sqlite3 "$DB" <<EOF
PRAGMA foreign_keys = ON;
CREATE TABLE accounts (
        user VARCHAR PRIMARY KEY,
        password VARCHAR,
        ts TIMESTAMP
);
CREATE TABLE images (
        user VARCHAR REFERENCES accounts(user) ON DELETE CASCADE,
        image VARCHAR
);
CREATE UNIQUE INDEX idx_images_user_image ON images(user, image);
EOF
  chown "${USER}:${USER}" "$DB" && chmod 660 "$DB" && return 0
}

#######################################
# Recreate database if it's not SQLite
# Old versions of ISLET used text file
# Globals:
#   DB   - Location of database file
# Arguments:
#   None
# Returns:
#   None
#######################################

is_sqlite() {
  if ! file "$DB" 2>/dev/null | grep -q SQLite; then
    rm -f "$DB" 2>/dev/null
    create_db
    test $? -eq 0 && return 0 || quit "Unable to create $DB"
  fi
}

#######################################
# Prompt user if they're new or existing
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################

identify(){
  local CHOICE
  ask "Are you a new or existing user? "
  option "new" "existing"
  read -r CHOICE

  if [[ "$CHOICE" = "new" ]] || [[ "$CHOICE" = "existing" ]]; then
    [[ "$CHOICE" = "new" ]] && new_user
    [[ "$CHOICE" = "existing" ]] && existing_user
  else
    try_again
  fi
}

###################################################
# Get username and password for new user
# Globals:
#   AVAILABLE_USER - 1 if user already exists in DB
# Arguments:
#   None
# Returns:
#   None
###################################################

new_user(){
  notice "A temporary account will be created so that you can resume your session."
  echo

  until test "$AVAILABLE_USER" -ne 1
  do
    ask "Choose a username: "
    option "a-zA-Z0-9"
    read -r USERNAME

    USERNAME=$(sanitize $USERNAME)
    echo "Your username is ${MF}$USERNAME${N}"
    verify_new_user
  done

  ask "Choose a password: "
  option "a-zA-Z0-9{${MIN_PASSWD_LEN},}"
  read -r -s PASSWORD
  echo
  ask "Verify your password: "
  read -r -s PASSWORD_VERIFY
  echo

  verify_new_password
}

###################################################
# Handles container reattachment for existing users
# Globals:
#   FAILURE_COUNT - Max # of authentication failures
#   BASENAME      - Container name prefix
# Arguments:
#   None
# Returns:
#   None
###################################################

existing_user(){
  local USERNAME
  local PASSWORD
  local HASH
  local AUTH
  local EXISTS
  local COUNT=0
  notice "Your previous account is only valid for the length of the event, after that you must create a new account"
  echo
  while test "$COUNT" -lt "$FAILURE_COUNT"
  do
    ask "Username: "
    read -r USERNAME
    USERNAME=$(sanitize $USERNAME)
    ask "Password: "
    read -r -s PASSWORD
    echo

    HASH=$(echo "$PASSWORD" | sha1sum | sed 's/ .*//')
    AUTH=$(sqlite3 $DB "SELECT user, password FROM accounts WHERE user='$USERNAME' AND password='$HASH';")

    if [ "$AUTH" ]
    then
      info "Success"

      # This is how we handle using the same account for multiple images
      EXISTS=$(sqlite3 $DB "SELECT image FROM images WHERE user='$USERNAME' AND image='$BASENAME'";)
      [ "$EXISTS" ] || start_container

      # User is re-attaching to previous image
      log "${USERNAME}: Returning user from $CLIENT"
      message "Welcome back!"
      is_debug "opt: start/attach ${BASENAME}.${USERNAME}"

      docker start "${BASENAME}.${USERNAME}" > /dev/null 2>&1 && timeout --foreground "$TIMEOUT" docker attach "${BASENAME}.${USERNAME}"
      RESULT=$?
      test "$RESULT" -eq 124 && quit "Inactive timer expired in menu, exiting..."
      test "$RESULT" -ne 0 && quit "Launching container failed!"
      exec timeout --foreground "$TMOUT" "$SHELL" nobanner
      else
        notice "Login Failed, try again."
      fi
    let COUNT++
  done
  alert "Too many failed attempts!"
  quit "$COUNT failed password verification attempts"
}

###################################################
# Checks if user already exists in database
# Globals:
#   USERNAME - Username to validate
#   AVAILABLE_USER - 0 if username is note taken
# Arguments:
#   None
# Returns:
#   None
###################################################

verify_new_user(){
  local EXISTS
  EXISTS=$(sqlite3 "$DB" "SELECT user FROM accounts WHERE user='$USERNAME';")
  if [ "$EXISTS" ]
  then
    AVAILABLE_USER=1
    notice "User already exists! Try a different one."
  else
    AVAILABLE_USER=0
  fi
}

###########################################################
# Validate password, hash, and write account to database
# Globals:
#   PASSWORD      - Password to validate and store in db
#   USERNAME      - Used to create account in database
#   FAILURE_COUNT - Max # of authentication failures
#   CLIENT        - IP address of connecting user
#   EXPIRATION    - Date/time account expires
# Arguments:
#   None
# Returns:
#   None
###########################################################

verify_new_password(){
  local COUNT=0
  local HASH
  while [ "$PASSWORD" != "$PASSWORD_VERIFY" ] || [ "${#PASSWORD}" -lt "$MIN_PASSWD_LEN" ]
  do
    if [ "$COUNT" -lt "$FAILURE_COUNT" ]
    then
      notice "Passwords do not match or meet length requirements (${BF}"${MIN_PASSWD_LEN}"${N}${Y}). Try again."
      ask "Choose a password: "
      read -r -s PASSWORD
      echo
      ask "Verify your password: "
      read -r -s PASSWORD_VERIFY
      echo
    else
      alert "Too many failed attempts!"
      quit "$COUNT failed password verification attempts"
    fi
    let COUNT++
  done

  readonly HASH=$(echo "$PASSWORD" | sha1sum | sed 's/ .*//')
  sqlite3 "$DB" "pragma foreign_keys = on; INSERT INTO accounts VALUES('"${USERNAME}"','${HASH}', strftime('%s', 'now'));" || quit "Couldn't write to $DB!"
  log "${USERNAME}: Account created from $CLIENT"

  echo "Your account will expire on ${MF}$EXPIRATION${N}"
  start_container
}

###########################################################
# Reprompt if user did not select new or existing user
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
###########################################################

try_again(){
  local TRY
  ask "I didn't understand your response. Would you like to try again? "
  option "Y" "N"
  read -r TRY
  if [[ "$TRY" = [YyNn] ]] || [[ "$TRY" = "[yY][eE]sS]" ]] || [[ "$TRY" = "[nN][oO]" ]]; then
    [[ "$TRY" = [Yy] ]] || [[ "$TRY" = "[yY][eE][sS]" ]] && identify
    [[ "$TRY" = [Nn] ]] || [[ "$TRY" = "[nN][oO]" ]] && quit "User chose to exit from try_again"
  else
    quit "User forced to exit from try_again because of invalid response to question"
  fi
}

######################################################################
# Check if image exists before using it, try pulling it or fail out
# Globals:
#   IMAGE         - from ISLET configuration, docker image to launch
# Arguments:
#   None
# Returns:
#   None
######################################################################

does_image_exist(){
  if ! sudo fgrep -q "$IMAGE" /var/lib/docker/repositories-"${STORAGE_BACKEND}"
  then
    notice "Image not found, trying Docker Hub..." && echo
    docker pull "$IMAGE" 2>/dev/null || quit "Image doesn't exist!"
  fi
}

#################################################################################
# Create iptables rules for port forwarding to container
# Used to access ports on a user's container to do things
# like web interface training. Use PPID of session (sshd) as
# the port to use for forwarding, that way we can keep track
# of each user's session to iptables rule.
# Globals:
#   VIRTUAL_PORT - Port running inside container to access
#   HOST_PORT    - Port from host that's forwarded to container (VIRTUAL_PORT)
#   BIND         - IP address to use to access containers
#   CLIENT       - IP address of client provided by sshd
#   INTERFACE    - Network interface to apply iptables rule
#   USER         - Used for logging
#   PUBLISH      - Combination of above to set the Docker forwarding rule
# Arguments:
#   None
# Returns:
#   None
#################################################################################

port_forwarding_setup() {
  # Use HOST_PORT and CLIENT as a way to associate the user with a container port (VIRTUAL_PORT)
  if [ "$VIRTUAL_PORT" ]; then
    # If host port is in use, find another to bind to
    while true
    do
      if ! netstat -nalt | fgrep -q ":$HOST_PORT"
      then
        break
      fi
      let HOST_PORT++
    done

    readonly PUBLISH="--publish $BIND:$HOST_PORT:$VIRTUAL_PORT"

    if [[ "$BIND" == "127.0.0.1" ]]; then
      sudo sysctl -w net.ipv4.conf."${INTERFACE}".route_localnet=1 2>/dev/null
      did_it_work "sysctl command failed to execute, check ${USER}'s permissions"
    fi
    # Client will be able to connect to an exposed container port via $SERVER:$PPID
    sudo iptables -t nat -I PREROUTING -i "$INTERFACE" \
      -p tcp --source "$CLIENT" --dport "$HOST_PORT" -j DNAT --to "${BIND}:${HOST_PORT}" 2>/dev/null
    did_it_work "iptables command failed to execute, check ${USER}'s permissions"
  fi
}

######################################################################
# Remove container if set to remove or port forwarding is used.
# Removal means no reattachment and is useful in some training cases
# e.g. limited storage, resource constraints, confidential data, and
# port forwarding where we cannot guarentee the same port or client IP
# Globals:
#   REMOVE        - Option in ISLET configuration files for removal
#   VIRTUAL_PORT  - If set pass the remove option to Docker
#   DB            - Database to write to
#   BASENAME      - Add image to database for account if no removal
# Arguments:
#   None
# Returns:
#   None
######################################################################

removal_setup(){
  if [[ "$REMOVE" == "yes" ]] || [ "$VIRTUAL_PORT" ] # Re-attachment is impractical for port forwarding
  then
    echo
    notice "This container is set to be terminated upon exit, work will not be saved."
    REMOVE="--rm"
  else
    # Don't remove, instead keep track of the user's container for re-attachment
    sqlite3 "$DB" "pragma foreign_keys = on; INSERT INTO images(user, image) values ('$USERNAME', '$BASENAME');" 2>/dev/null
    REMOVE=""
  fi
}

###############################################################################################
# Pass all options to Docker and replace this process with the container
# Globals:
#   BASENAME        - from ISLET config files, container prefix used to build container name
#   USERNAME        - given username for login, container postfix, used to build container name
#   HOSTNAME        - from ISLET config files, hostname of container
#   CPU             - from ISLET config files, relative cpu share allocation per container
#   RAM             - from ISLET config files, memory allocation per container
#   NETWORK         - from ISLET config files, network settings for container
#   DNS             - from ISLET config files, nameservers for container
#   GLOBAL_OPTIONS  - from ISLET config files, pass docker options to all containers
#   LOCAL_OPTIONS   - from ISLET config files, pass per-image docker options
#   MOUNT           - from ISLET config files, pass mount options to docker
#   REMOVE          - from ISLET config files, remove container after exit
#   IMAGE           - from ISLET config files, docker image to launch
#   VIRTUSER        - from ISLET config files, user to become in container
#   GLOBAL_ENV      - from global ISLET config, pass environment variables to all containers
#   LOCAL_ENV       - from ISLET config files, pass per-image environment variables
#   CLIENT          - ip address of connecting user
#   SRCPORT         - source port of connecting user
#   SERVER          - ip address of islet server
#   DSTPORT         - ssh destination port of islet server
#   SSH_TTY         - name of the tty associated with the current shell
#   TERM            - terminal used
#   PPID            - pid of the sshd process of the user's session
#   TMOUT           - shell's timeout value
#   TIMEOUT         - from ISLET config files, max time container can run
#   INFOLEVEL       - from ISLET config files, DEBUG'ing information
# Arguments:
#   None
# Returns:
#   None
###############################################################################################

start_container(){
  does_image_exist
  removal_setup
  port_forwarding_setup

  local NAME_OPT="--name="${BASENAME}.${USERNAME}" -t -h $HOSTNAME"
  local RES_OPT="-c $CPU -m $RAM"
  local NET_OPT="$PUBLISH --net $NETWORK --dns $DNS --add-host $HOSTNAME:127.0.0.1"
  local GLB_OPT="$GLOBAL_OPTIONS"
  local OTH_OPT="$LOCAL_OPTIONS"
  local MNT_OPT="$MOUNT"
  local IMG_OPT="$REMOVE -i $IMAGE"
  local ENV_OPT="sudo -i -u $VIRTUSER $GLOBAL_ENV $LOCAL_ENV"

  # If debugging is yes
  is_debug "shell: CLIENT=$CLIENT SRCPORT=$SRCPORT SERVER=$SERVER DSTPORT=$DSTPORT SSH_TTY=$SSH_TTY TERM=$TERM PPID=$PPID TMOUT=$TMOUT"
  is_debug "opt: docker run $NAME_OPT $RES_OPT $NET_OPT $GLB_OPT $OTH_OPT $MNT_OPT $IMG_OPT $ENV_OPT"

  message "Enjoy yourself!"

  # Run container
  eval timeout --foreground "$TIMEOUT" docker run "$NAME_OPT $RES_OPT $NET_OPT $GLB_OPT $OTH_OPT $MNT_OPT $IMG_OPT $ENV_OPT" "$INFOLEVEL"
  is_timeout "Inactive timer expired in container, exiting..."
  # Back to menu if we didn't hit $TIMEOUT
  exec timeout --foreground "$TMOUT" "$SHELL" nobanner
}

trap 'echo; quit "Trap received, exiting..."' 1 2 3 20
# It all begins here
is_sqlite
identify
exit
