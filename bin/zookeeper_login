#!/usr/bin/env bash
# Global Variables
CONFIG=LOCATION

# Varables:
COUNT=0
TIME=$(date +"%s")
EXPIRATION=$(date --date=@$((TIME+86400*DAYS)) +"%c")
AVAILABLE_USER=1

# Retrieve globals
if [ -f $CONFIG ]; then
        source $CONFIG
        source $LIBZK
else
        >&2 echo "Error: ${CONFIG:-config} or ${LIBZK:-libzk} not found!"
        exit 1
fi

# Override with per image configuration
CONFIGURATION="$1"
source "$CONFIG_DIR/$CONFIGURATION"

if [ ! -r $DB ]; then
        touch $DB
	chown ${USER}:${USER} $DB
	chmod 660 $DB
fi

identify(){
        read -r -p "Are you a new or existing user? [new/existing]: " CHOICE
        echo

        if [[ "$CHOICE" = "new" ]] || [[ "$CHOICE" = "existing" ]]; then
                [[ "$CHOICE" = "new" ]] && new_user
                [[ "$CHOICE" = "existing" ]] && existing_user
        else
                try_again
        fi
}

new_user(){
        echo "A temporary account will be created so that you can resume your session. Account is valid for the length of the event."
        echo

        until test $AVAILABLE_USER -ne 1
        do
                read -r -p "Choose a username [a-zA-Z0-9]: " USERNAME
                USERNAME=$(sanitize $USERNAME)
                echo "Your username is $USERNAME"
                verify_new_user
        done

        read -r -s -p "Choose a password: " PASSWORD
        echo
        read -r -s -p "Verify your password: " PASSWORD_VERIFY
        echo
        verify_new_password
}

existing_user(){
        echo "Your previous account is only valid for the length of the event, after that you must create a new account"
        echo
        while test $COUNT -lt $FAILURE_COUNT
        do
                read -r -p "Username: " USERNAME
                USERNAME=$(sanitize $USERNAME)
                read -r -s -p "Password: " PASSWORD
                echo
                USER_SUPPLIED_PASSWORD=$(echo "$PASSWORD" | sha1sum | sed 's/ .*//')
                HASH=$(awk -F : -v user=$USERNAME '$1 == user { print $2 }' $DB)
                if [ "$USER_SUPPLIED_PASSWORD" = "$HASH" ]
                then
                        echo Success
                        log "${USERNAME}: Returning user"
                        message "Welcome back!"
                        docker start "${BASENAME}.${USERNAME}" > /dev/null 2>&1 && exec docker attach "${BASENAME}.${USERNAME}"
                        if [ $? -ne 0 ]; then
                                alert "Launching container failed! Please report to admins"
                                quit "Launching container failed!"
                        fi
                else
                        notice "Login Failed, try again."
                fi
                let COUNT++
        done
        alert "Too many failed attempts!"
        quit "$COUNT failed password verification attempts"
}

verify_new_user(){
        grep -w -q "$USERNAME" $DB 2>/dev/null
        if [ $? -eq 0 ]; then
                notice "User already exists! Try a different one."
                AVAILABLE_USER=1
        else
                AVAILABLE_USER=0
        fi
}

verify_new_password(){
        while [ "$PASSWORD" != "$PASSWORD_VERIFY" ]
        do
                if [ $COUNT -lt $FAILURE_COUNT ]
                then
                        echo "Passwords do not match! Try again."
                        read -r -s -p "Choose a password: " PASSWORD
                        echo
                        read -r -s -p "Verify your password: " PASSWORD_VERIFY
                        echo
                else
                        alert "Too many failed attempts!"
                        quit "$COUNT failed password verification attempts"
                fi
        let COUNT++
        done

        HASH=$(echo "$PASSWORD" | sha1sum | sed 's/ .*//')

        (
        flock --timeout 10 100 || quit "Couldn't obtain lock on file, try again later"
        echo "${USERNAME}:${HASH}:${TIME}" >> $DB
        ) 100>~/zookeeper.lock

        log "${USERNAME}: Account created"
        echo "Your account will expire on $EXPIRATION"
        start_container
}

try_again(){
        read -r -p "I didn't understand your response. Would you like to try again? [Y/N]: " TRY
        if [[ "$TRY" = [YyNn] ]] || [[ "$TRY" = "[yY][eE]sS]" ]] || [[ "$TRY" = "[nN][oO]" ]]; then
                [[ "$TRY" = [Yy] ]] || [[ "$TRY" = "[yY][eE][sS]" ]] && clear && identify
                [[ "$TRY" = [Nn] ]] || [[ "$TRY" = "[nN][oO]" ]] && quit "User chose to exit from try_again"
        else
                quit "User forced to exit from try_again because of invalid response to question"
        fi
}

start_container(){
        message "Enjoy yourself!"
	exec docker run --name="${BASENAME}.${USERNAME}" -t -h $HOSTNAME -c $CPU -m $RAM --net $NETWORK --dns $DNS \
		$OPTIONS $MOUNT -i $IMAGE sudo -i -u $VIRTUSER 2>/dev/null
}

trap 'echo; quit "Trap received, exiting..."' 1 2 3 20
identify
exit
