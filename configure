#!/usr/bin/env bash
# This isn't a configure generated by autoconf!
# ISLET build system
# Copyright 2014 Jon Schipp <jonschipp@gmail.com>
# Subject to the GNU GPL

# Get colors from libislet
LIBISLET=lib/libislet
[ -f $LIBISLET ] && source $LIBISLET

# Global Declarations
OK=0
CRITICAL=1
DEPENDS="bash cron make sshd docker sqlite3"
MISSING=()
NO="${Y}[${N}${RF}NO${N}${Y}]${N}"
YES="${Y}[${N}${BF}YES${N}${Y}]${N}"
BULLET="${Y}[${N}${BF}*${N}${Y}]${N}"

check_arch()
{
        echo -n "${BULLET} Checking arch ... "
	ARCH=$(getconf LONG_BIT)
        if [ $ARCH -ne 64 ] ; then
                echo "$NO Not a 64-bit system"
		MISSING+=('64-bit')
        else
                echo "$YES 64-bit system"
        fi
}

check_linux()
{
        echo -n "${BULLET} Checking Linux ... "

        if [[ "$(uname)" != "Linux" ]] ; then
                echo "$NO Linux not found"
		MISSING+=('Linux')
        else
                echo "$YES Linux found"
        fi
}

check_dependencies()
{
	local depends=$1
        echo -n "${BULLET} Checking $depends ... "

        if [[ "x$(which $depends 2>/dev/null)" == "x" ]] ; then
                echo "$NO $depends not found"
		MISSING+=("$depends")
        else
                echo "$YES $depends found"
        fi
}

check_arch
check_linux

for i in $DEPENDS
do
	check_dependencies $i
done

if [ ${#MISSING[@]} -gt 0 ];
then
	count=$(echo ${#MISSING[@]})
	echo -n "${Y}[${N}${RF}!${N}${Y}]${N} Missing dependencies: "
	for (( i=0; i<${count}; i++ ));
	do
  		echo -n "${MISSING[$i]} "
	done
	echo
	exit $CRITICAL
else
	echo "${BULLET} All dependencies found, now you can run \`\`make install''"
fi
