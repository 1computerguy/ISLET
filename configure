#!/usr/bin/env bash
# This isn't a configure generated by autoconf!
# ISLET build system
# Copyright 2014 Jon Schipp <jonschipp@gmail.com>
# Subject to the GNU GPL

# Get colors from libislet
LIBISLET=lib/libislet
[ -f $LIBISLET ] && source $LIBISLET

# Global Declarations
OK=0
CRITICAL=1
DEPENDS="bash cron make sshd docker sqlite3"
MISSING=()
DEBIAN=0
NO="${Y}[${N}${RF}NO${N}${Y}]${N}"
YES="${Y}[${N}${BF}YES${N}${Y}]${N}"
BULLET="${Y}[${N}${BF}*${N}${Y}]${N}"

check_arch()
{
  echo -n "${BULLET} Checking arch ... "
  ARCH=$(getconf LONG_BIT)
  if [ $ARCH -ne 64 ] ; then
    echo "$NO Not a 64-bit system"
    MISSING+=('64-bit')
  else
    echo "$YES 64-bit system"
  fi
}

check_linux()
{
  echo -n "${BULLET} Checking Linux ... "

  if [[ "$(uname)" != "Linux" ]] ; then
    echo "$NO Linux not found"
    MISSING+=('Linux')
  else
    echo "$YES Linux found"
  fi
}

is_debian()
{
  test -f /etc/debian_version && DEBIAN=1
}

check_dependencies()
{
  local depends=$1
  echo -n "${BULLET} Checking $depends ... "

  if [[ "x$(which $depends 2>/dev/null)" == "x" ]] ; then

    [ "$depends" = "docker" ] && test $DEBIAN -eq 1 &&
    echo -n "$NO $depends not found, try "  &&
    notice "\`\`make install-docker''" 	||
      echo "$NO $depends not found"

    MISSING+=("$depends")

  else
      echo "$YES $depends found"
  fi
}

check_docker_version()
{
if ! echo ${MISSING[@]} | grep -q docker; then
  echo -n "${BULLET} Checking docker version... "
  docker version 2>/dev/null | egrep -q 'Server version: 1.[7-9]|Version:      1.[7-9]' 2>/dev/null && echo "$YES 1.7+ found"|| echo "$NO 1.7+ not found"
fi
}

check_bash_version()
{
  echo -n "${BULLET} Checking bash version ... "
  ! [[ "x$(which bash 2>/dev/null)" == "x" ]] && vers=$(bash -c 'echo $BASH_VERSION')
  echo $vers | grep -q '^[45]' && echo "$YES 4.0+ found" || echo "$NO 4.0+ not found"
}

check_arch
check_linux
is_debian

for i in $DEPENDS
do
  check_dependencies $i
done

check_docker_version
check_bash_version

if [ ${#MISSING[@]} -gt 0 ];
then
  count=$(echo ${#MISSING[@]})
  echo -n "${Y}[${N}${RF}!${N}${Y}]${N} Missing dependencies: "
  for (( i=0; i<${count}; i++ ));
  do
    echo -n "${MISSING[$i]} "
  done
  echo
  exit $CRITICAL
else
  echo "${BULLET} All dependencies found, now you can run \`\`make install''"
fi
