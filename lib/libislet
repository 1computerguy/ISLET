#!/usr/bin/env bash
SPACER1="---------------"
SPACER2="               "

normal="$(tput sgr0)"
bold="$(tput bold)"
underline="$(tput smul)"
yellow="$(tput setaf 3)"
blackf="$(tput setaf 0)"
blackb="$(tput setab 0)"
redf="$(tput setaf 1)"
redb="$(tput setab 1)"
greenf="$(tput setaf 2)"
greenb="$(tput setab 2)"
bluef="$(tput setaf 4)"
blueb="$(tput setab 4)"
magentaf="$(tput setaf 5)"
magentab="$(tput setab 5)"
cyanf="$(tput setaf 6)"
cyanb="$(tput setab 6)"
whitef="$(tput setaf 7)"
whiteb="$(tput setab 7)"

N="${normal}"
B="${bold}"
U="${underline}"
Y="${yellow}"
BLF="${blackf}"
BLB="${blackb}"
RF="${redf}"
RB="${redb}"
GF="${greenf}"
GB="${greenb}"
BF="${bluef}"
BB="${blueb}"
MF="${magentaf}"
MB="${magentab}"
CF="${cyanf}"
CB="${cyanb}"
WF="${whitef}"
WB="${whiteb}"

#######################################
# Print text in specific color
# Globals:
#   Color codes
# Arguments:
#   String of characters
# Returns:
#   Message in color
#######################################

red()     { alert; }
yellow()  { notice; }
magenta() { info; }
white()   { ask; }

alert()   { printf "${redf}$*${normal}\n" >>/dev/stderr; }
notice()  { printf "${yellow}$*${normal}\n"; }
info()    { printf "${magentaf}$*${normal}\n"; }
ask()     { printf "${whitef}$*${normal}"; }
option()  { printf "${Y}[${N}${BF}$1${N}${Y}/${N}${BF}$2${N}${Y}]${N}: " ;}

#########################################
# Print, log, and exit script for errors
# Globals:
#   None
# Arguments:
#   String of text indicating issue
# Returns:
#   Red text and exits 1
##########################################

quit(){ local message="$1"; alert "${message:-Exiting session!}"; log "$message"; exit 1; }

######################################################
# Color message MOTD from ISLET config yellow
# Globals:
#   MOTD      - Message of the day string from config
# Arguments:
#   String of text
# Returns:
#   Yellow text
######################################################

message(){ local message="$1"; echo; echo "$message"; notice "$MOTD"; echo; }

######################################################
# Sanitize input by removing special characters and
# symbols. Used to normalize usernames and passwords
# Globals:
#  None
# Arguments:
#   String of text, either username or password
# Returns:
#   Sanitized string
######################################################

sanitize(){ local item="$1"; echo "${item//[^a-zA-Z0-9]/}"; }

#########################################################
# Check exit code of last command
# Globals:
#  None
# Arguments:
#   String of text
# Returns:
#   If true, calls quit which exits 1 after log and error
#########################################################

did_it_work() { test "$?" -ne 0 && quit "$1"; }

#######################################
# Print ISLET banner
# Globals:
#   Color codes
# Arguments:
#   None
# Returns:
#   Text of ISLET banner
#######################################

islet_banner(){
cat <<EOF
${MF}===============================================================${N}

   ${BF}ISLET${N}${RF}:${N} ${Y}A Linux-based Software Training System${N}

${Y}(${N}${RF}I${N}${Y})${N}solated,
          ${Y}(${N}${RF}S${N}${Y})${N}calable,
                    & ${Y}(${N}${RF}L${N}${Y})${N}ightweight ${Y}(${N}${RF}E${N}${Y})${N}nvironment
						for ${Y}(${N}${RF}T${N}${Y})${N}raining

   ${BF}Web${N}${RF}:${N} ${U}${Y}https://github.com/jonschipp/islet${N}

${MF}===============================================================${N}
EOF
}

#######################################
# Log message to syslog daemon
# Globals:
#   None
# Arguments:
#  String of message to log
# Returns:
#   None
#######################################

log(){
	local message=$(echo "$1" | sed -e 's/\\n/ /g' -e 's/\\t/ /g' -e 's/\\r/ /g')
  logger -p local0.notice -t "islet" "$0: $message"
}

#######################################
# Checks if debug mode is on and prints
# and logs message if on.
# Globals:
#   DEBUG   - from ISLET config files
# Arguments:
#   String of message
# Returns:
#   Message to stdout in yellow
#######################################

is_debug(){
  local message="$1"
  if [[ "$DEBUG" == "yes" ]];
  then
    INFOLEVEL=""
    alert "$message"
    log "$message"
  else
    INFOLEVEL="2>/dev/null"
  fi
}
